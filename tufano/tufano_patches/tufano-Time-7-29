--- /src/main/java/org/joda/time/format/DateTimeFormatter.java
+++ /src/main/java/org/joda/time/format/DateTimeFormatter.java
@@ -697,35 +697,7 @@
      * @throws IllegalArgumentException if the instant is null
      * @throws IllegalArgumentException if any field is out of range
      */
-    public int parseInto(ReadWritableInstant instant, String text, int position) {
-        DateTimeParser parser = requireParser();
-        if (instant == null) {
-            throw new IllegalArgumentException("Instant must not be null");
-        }
-        
-        long instantMillis = instant.getMillis();
-        Chronology chrono = instant.getChronology();
-        long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);
-        chrono = selectChronology(chrono);
-        int defaultYear = chrono.year().get(instantLocal);
-        
-        DateTimeParserBucket bucket = new DateTimeParserBucket(
-            instantLocal, chrono, iLocale, iPivotYear, defaultYear);
-        int newPos = parser.parseInto(bucket, text, position);
-        instant.setMillis(bucket.computeMillis(false, text));
-        if (iOffsetParsed && bucket.getOffsetInteger() != null) {
-            int parsedOffset = bucket.getOffsetInteger();
-            DateTimeZone parsedZone = DateTimeZone.forOffsetMillis(parsedOffset);
-            chrono = chrono.withZone(parsedZone);
-        } else if (bucket.getZone() != null) {
-            chrono = chrono.withZone(bucket.getZone());
-        }
-        instant.setChronology(chrono);
-        if (iZone != null) {
-            instant.setZone(iZone);
-        }
-        return newPos;
-    }
+ protected ReadWritableInstant parseInto ( ReadWritableInstant instant , int parser , DateTimeParser instantMillis , int chrono , int instantLocal ) { final TYPE_7 bucket = requireParser ( instantLocal ) ; int iLocale = 0 ; ReadWritableInstant iPivotYear ; IllegalArgumentException newPos = new Chronology ( ) ; DateTimeParserBucket iOffsetParsed ; IllegalArgumentException parsedOffset = instantMillis . getMillis ( ) ; DateTimeZone . getChronology ( parsedOffset , new TYPE_7 ( ) ) ; for ( TYPE_8 i = parsedOffset . iterator ( ) ; i . getZone ( ) ; return requireParser ( instantLocal ) ; } 
 
     /**
      * Parses a datetime from the given text, returning the number of
