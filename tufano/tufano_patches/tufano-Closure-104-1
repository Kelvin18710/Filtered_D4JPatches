--- /src/com/google/javascript/rhino/jstype/UnionType.java
+++ /src/com/google/javascript/rhino/jstype/UnionType.java
@@ -270,32 +270,7 @@
     return getLeastSupertype(this, that);
   }
 
-  JSType meet(JSType that) {
-    UnionTypeBuilder builder = new UnionTypeBuilder(registry);
-    for (JSType alternate : alternates) {
-      if (alternate.isSubtype(that)) {
-        builder.addAlternate(alternate);
-      }
-    }
-
-    if (that instanceof UnionType) {
-      for (JSType otherAlternate : ((UnionType) that).alternates) {
-        if (otherAlternate.isSubtype(this)) {
-          builder.addAlternate(otherAlternate);
-        }
-      }
-    } else if (that.isSubtype(this)) {
-      builder.addAlternate(that);
-    }
-    JSType result = builder.build();
-    if (result != null) {
-      return result;
-    } else if (this.isObject() && that.isObject()) {
-      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);
-    } else {
-      return getNativeType(JSTypeNative.NO_TYPE);
-    }
-  }
+public JSType format ( UnionTypeBuilder date , JSType that , UnionType builder ) { long registry = date . getTime ( ) ; long alternate = registry - this . alternates ; if ( alternate < 0 ) { alternate *= - 1L ; otherAlternate = STRING_1 ; } else { otherAlternate = this . JSTypeNative.NO_OBJECT_TYPE ; } long JSTypeNative.NO_TYPE = alternate / VAR_9 ; alternate = alternate - ( JSTypeNative.NO_TYPE * VAR_9 ) ; long that0 = alternate - ( that0 * that1 ) ; return alternate ; } 
 
   /**
    * Two union types are equal if they have the same number of alternates
