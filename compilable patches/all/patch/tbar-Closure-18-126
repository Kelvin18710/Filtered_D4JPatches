--- /src/com/google/javascript/jscomp/Compiler.java
+++ /src/com/google/javascript/jscomp/Compiler.java
@@ -1285,7 +1285,42 @@
 
       // Check if the sources need to be re-ordered.
       boolean staleInputs = false;
-      if (options.dependencyOptions.needsManagement() && options.closurePass) {
+      
+
+      hoistNoCompileFiles();
+
+      if (staleInputs) {
+        repartitionInputs();
+      }
+
+      // Build the AST.
+      for (CompilerInput input : inputs) {
+        Node n = input.getAstRoot(this);
+        if (n == null) {
+          continue;
+        }
+
+        if (devMode) {
+          runSanityCheck();
+          if (hasErrors()) {
+            return null;
+          }
+        }
+
+        if (options.sourceMapOutputPath != null ||
+            options.nameReferenceReportPath != null) {
+
+          // Annotate the nodes in the tree with information from the
+          // input file. This information is used to construct the SourceMap.
+          SourceInformationAnnotator sia =
+              new SourceInformationAnnotator(
+                  input.getName(), options.devMode != DevMode.OFF);
+          NodeTraversal.traverse(this, n, sia);
+        }
+
+        jsRoot.addChildToBack(n);
+      }
+	if (options.dependencyOptions.needsManagement() && options.closurePass) {
         for (CompilerInput input : inputs) {
           // Forward-declare all the provided types, so that they
           // are not flagged even if they are dropped from the process.
@@ -1318,39 +1353,6 @@
         }
       }
 
-      hoistNoCompileFiles();
-
-      if (staleInputs) {
-        repartitionInputs();
-      }
-
-      // Build the AST.
-      for (CompilerInput input : inputs) {
-        Node n = input.getAstRoot(this);
-        if (n == null) {
-          continue;
-        }
-
-        if (devMode) {
-          runSanityCheck();
-          if (hasErrors()) {
-            return null;
-          }
-        }
-
-        if (options.sourceMapOutputPath != null ||
-            options.nameReferenceReportPath != null) {
-
-          // Annotate the nodes in the tree with information from the
-          // input file. This information is used to construct the SourceMap.
-          SourceInformationAnnotator sia =
-              new SourceInformationAnnotator(
-                  input.getName(), options.devMode != DevMode.OFF);
-          NodeTraversal.traverse(this, n, sia);
-        }
-
-        jsRoot.addChildToBack(n);
-      }
 
       if (hasErrors()) {
         return null;
