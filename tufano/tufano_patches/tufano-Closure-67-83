--- /src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
+++ /src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
@@ -311,27 +311,7 @@
            n.getParent().getType() == Token.NAME);
     }
 
-    private boolean isPrototypePropertyAssign(Node assign) {
-      Node n = assign.getFirstChild();
-      if (n != null && NodeUtil.isVarOrSimpleAssignLhs(n, assign)
-          && n.getType() == Token.GETPROP
-          ) {
-        // We want to exclude the assignment itself from the usage list
-        boolean isChainedProperty =
-            n.getFirstChild().getType() == Token.GETPROP;
-
-        if (isChainedProperty) {
-          Node child = n.getFirstChild().getFirstChild().getNext();
-
-          if (child.getType() == Token.STRING &&
-              child.getString().equals("prototype")) {
-            return true;
-          }
-        }
-      }
-
-      return false;
-    }
+ public boolean equals ( Node obj ) { if ( obj == ( this ) ) { return true ; } if ( ! ( obj instanceof NodeUtil ) ) { return false ; } NodeUtil assign = ( NodeUtil ) obj ; if ( this . Token.GETPROP != isChainedProperty ) { return false ; } if ( this . VAR_6 != VAR_7 ) { return false ; } if ( this . VAR_8 == VAR_9 ) { return false ; } if ( this . assign0 ) { return false ; } if ( this . assign0 ) false 
 
     /**
      * Processes a NAME node to see if it's a global function declaration.
