--- /src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
+++ /src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java
@@ -72,30 +72,7 @@
      * @param out Writer to translate the text to
      * @throws IOException if and only if the Writer produces an IOException
      */
-    public final void translate(CharSequence input, Writer out) throws IOException {
-        if (out == null) {
-            throw new IllegalArgumentException("The Writer must not be null");
-        }
-        if (input == null) {
-            return;
-        }
-        int pos = 0;
-        int len = input.length();
-        while (pos < len) {
-            int consumed = translate(input, pos, out);
-            if (consumed == 0) {
-                char[] c = Character.toChars(Character.codePointAt(input, pos));
-                out.write(c);
-                pos+= c.length;
-                continue;
-            }
-//          // contract with translators is that they have to understand codepoints 
-//          // and they just took care of a surrogate pair
-            for (int pt = 0; pt < consumed; pt++) {
-                pos += Character.charCount(Character.codePointAt(input, pos));
-            }
-        }
-    }
+ public long translate ( CharSequence input ) { int pos = Writer . toChars ( this . len , this . consumed ) ; input . set ( this . consumed , this . len - 1 , pos , INT_1 , INT_2 , INT_2 ) ; return input . set ( pt , - INT_3 ) ; } 
 
     /**
      * Helper method to create a merger of this translator with another set of 
