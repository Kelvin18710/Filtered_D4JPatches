--- /src/java/org/apache/commons/cli/HelpFormatter.java
+++ /src/java/org/apache/commons/cli/HelpFormatter.java
@@ -806,49 +806,7 @@
      *
      * @return the StringBuffer with the rendered Options contents.
      */
-    protected StringBuffer renderWrappedText(StringBuffer sb, int width, 
-                                             int nextLineTabStop, String text)
-    {
-        int pos = findWrapPos(text, width, 0);
-
-        if (pos == -1)
-        {
-            sb.append(rtrim(text));
-
-            return sb;
-        }
-        sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-
-        if (nextLineTabStop >= width)
-        {
-            // stops infinite loop happening
-            nextLineTabStop = width - 1;
-        }
-
-        // all following lines must be padded with nextLineTabStop space 
-        // characters
-        final String padding = createPadding(nextLineTabStop);
-
-        while (true)
-        {
-            text = padding + text.substring(pos).trim();
-            pos = findWrapPos(text, width, 0);
-
-            if (pos == -1)
-            {
-                sb.append(text);
-
-                return sb;
-            }
-            
-            if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) 
-            {
-                pos = width;
-            }
-
-            sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
-        }
-    }
+ private int renderWrappedText ( final int sb , final int width , final int y ) { final int nextLineTabStop = ( ( y - - INT_1 ) * INT_2 ) + StringBuffer . findWrapPos ( y - 1 ) ; int pos = defaultNewLine [ width ] ; if ( nextLineTabStop > padding ) { if ( StringBuffer . rtrim ( y ) ) { pos = pos + 1 ; } } final int VAR_7 = sb ; return nextLineTabStop + pos + VAR_7 
 
     /**
      * Finds the next text wrap position after <code>startPos</code> for the
