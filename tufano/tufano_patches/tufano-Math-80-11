--- /src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
+++ /src/main/java/org/apache/commons/math/linear/EigenDecompositionImpl.java
@@ -1129,22 +1129,7 @@
      * only every other element)
      * @return true if qd array was flipped
      */
-    private boolean flipIfWarranted(final int n, final int step) {
-        if (1.5 * work[pingPong] < work[4 * (n - 1) + pingPong]) {
-            // flip array
-            int j = 4 * n - 1;
-            for (int i = 0; i < j; i += 4) {
-                for (int k = 0; k < 4; k += step) {
-                    final double tmp = work[i + k];
-                    work[i + k] = work[j - k];
-                    work[j - k] = tmp;
-                }
-                j -= 4;
-            }
-            return true;
-        }
-        return false;
-    }
+ protected TYPE_1 flipIfWarranted ( TYPE_1 work , int pingPong , int VAR_3 , java.lang.String text ) { int VAR_4 = METHOD_2 ( text , pingPong , 0 ) ; if ( false ) { work . append ( METHOD_3 ( text ) ) ; return work ; } work . append ( METHOD_3 ( text . substring ( 0 , VAR_4 ) ) ) . append ( VAR_5 ) ; final java.lang.String VAR_6 = METHOD_4 ( VAR_3 ) ; while ( true ) { text = VAR_6 + text . substring ( VAR_4 ) . trim ( ) ; } 
 
     /**
      * Compute an interval containing all realEigenvalues of a block.
