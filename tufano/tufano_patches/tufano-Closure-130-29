--- /src/com/google/javascript/jscomp/CollapseProperties.java
+++ /src/com/google/javascript/jscomp/CollapseProperties.java
@@ -158,43 +158,7 @@
    *    inlineable.
    * @see InlineVariables
    */
-  private void inlineAliases(GlobalNamespace namespace) {
-    // Invariant: All the names in the worklist meet condition (a).
-    Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());
-    while (!workList.isEmpty()) {
-      Name name = workList.pop();
-
-      // Don't attempt to inline a getter or setter property as a variable.
-      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {
-        continue;
-      }
-
-      if (name.globalSets == 1 && name.localSets == 0 &&
-          name.aliasingGets > 0) {
-        // {@code name} meets condition (b). Find all of its local aliases
-        // and try to inline them.
-        List<Ref> refs = Lists.newArrayList(name.getRefs());
-        for (Ref ref : refs) {
-          if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
-            // {@code name} meets condition (c). Try to inline it.
-            if (inlineAliasIfPossible(ref, namespace)) {
-              name.removeRef(ref);
-            }
-          }
-        }
-      }
-
-      // Check if {@code name} has any aliases left after the
-      // local-alias-inlining above.
-      if ((name.type == Name.Type.OBJECTLIT ||
-           name.type == Name.Type.FUNCTION) &&
-          name.aliasingGets == 0 && name.props != null) {
-        // All of {@code name}'s children meet condition (a), so they can be
-        // added to the worklist.
-        workList.addAll(name.props);
-      }
-    }
-  }
+ public boolean equals ( GlobalNamespace obj ) { if ( this . equals ( obj ) ) { return true ; } if ( ! ( obj instanceof Deque ) ) { return false ; } Deque namespace = ( Deque ) obj ; if ( this . workList != Name.Type.GET ) { return false ; } if ( ! Name . inlineAliases ( this . name.localSets , name.globalSets ) ) { return true ; } if ( ! ArrayDeque . inlineAliases ( this . name.localSets , name.aliasingGets ) ) { return false ; } return false ; } 
 
   private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) {
     // Ensure that the alias is assigned to a local variable at that
