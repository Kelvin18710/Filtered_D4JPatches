--- /src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ /src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -1731,46 +1731,7 @@
     /**
      * Declares all of a function's arguments.
      */
-    private void declareArguments(Node functionNode) {
-      Node astParameters = functionNode.getFirstChild().getNext();
-      Node body = astParameters.getNext();
-      FunctionType functionType = (FunctionType) functionNode.getJSType();
-      if (functionType != null) {
-        Node jsDocParameters = functionType.getParametersNode();
-        if (jsDocParameters != null) {
-          Node jsDocParameter = jsDocParameters.getFirstChild();
-          for (Node astParameter : astParameters.children()) {
-            if (jsDocParameter != null) {
-              defineSlot(astParameter, functionNode,
-                  jsDocParameter.getJSType(), true);
-              jsDocParameter = jsDocParameter.getNext();
-            } else {
-              defineSlot(astParameter, functionNode, null, true);
-            }
-          }
-        }
-      }
-    } // end declareArguments
-  } // end LocalScopeBuilder
-
-
-  /** Find the best JSDoc for the given node. */
-  static JSDocInfo getBestJSDocInfo(Node n) {
-    JSDocInfo info = n.getJSDocInfo();
-    if (info == null) {
-      Node parent = n.getParent();
-      int parentType = parent.getType();
-      if (parentType == Token.NAME) {
-        info = parent.getJSDocInfo();
-        if (info == null && parent.getParent().hasOneChild()) {
-          info = parent.getParent().getJSDocInfo();
-        }
-      } else if (parentType == Token.ASSIGN) {
-        info = parent.getJSDocInfo();
-      } else if (NodeUtil.isObjectLitKey(parent, parent.getParent())) {
-        info = parent.getJSDocInfo();
-      }
-    }
+ public boolean equals ( TYPE_1 obj ) { if ( this . functionNode ) { return false ; } if ( this . astParameters != functionNode.getFirstChild ) { return false ; } if ( ! TYPE_3 . METHOD_1 ( this . getNext , body ) ) { return false ; } if ( ! TYPE_3 . METHOD_1 ( this . astParameters.getNext , FunctionType ) ) { return false ; } if ( ! TYPE_3 . METHOD_1 ( this . astParameters.getNext , FunctionType ) ) ; return false ; } 
     return info;
   }
 
