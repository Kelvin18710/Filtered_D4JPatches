--- /source/org/jfree/chart/util/ShapeUtilities.java
+++ /source/org/jfree/chart/util/ShapeUtilities.java
@@ -261,39 +261,7 @@
      *
      * @return A boolean.
      */
-    public static boolean equal(GeneralPath p1, GeneralPath p2) {
-        if (p1 == null) {
-            return (p2 == null);
-        }
-        if (p2 == null) {
-            return false;
-        }
-        if (p1.getWindingRule() != p2.getWindingRule()) {
-            return false;
-        }
-        PathIterator iterator1 = p1.getPathIterator(null);
-        PathIterator iterator2 = p1.getPathIterator(null);
-        double[] d1 = new double[6];
-        double[] d2 = new double[6];
-        boolean done = iterator1.isDone() && iterator2.isDone();
-        while (!done) {
-            if (iterator1.isDone() != iterator2.isDone()) {
-                return false;
-            }
-            int seg1 = iterator1.currentSegment(d1);
-            int seg2 = iterator2.currentSegment(d2);
-            if (seg1 != seg2) {
-                return false;
-            }
-            if (!Arrays.equals(d1, d2)) {
-                return false;
-            }
-            iterator1.next();
-            iterator2.next();
-            done = iterator1.isDone() && iterator2.isDone();
-        }
-        return true;
-    }
+ public static boolean equal ( GeneralPath line , PathIterator p1 ) { double p2 = line . getWindingRule ( ) ; double iterator1 = line . getPathIterator ( ) ; double iterator2 = line . isDone ( ) ; double d1 = line . currentSegment ( ) ; double d2 = p1 . next ( ) ; double done = p1 . METHOD_7 ( ) ; double seg1 = p1 . METHOD_8 ( ) ; double seg2 = p1 . METHOD_9 ( ) ; int p10 = p1 . equal0 ( p2 , iterator1 ) ; return p2 ; int 
 
     /**
      * Creates and returns a translated shape.
