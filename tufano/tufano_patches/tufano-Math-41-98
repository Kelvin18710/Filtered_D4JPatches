--- /src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
+++ /src/main/java/org/apache/commons/math/stat/descriptive/moment/Variance.java
@@ -498,38 +498,7 @@
      * @throws IllegalArgumentException if the parameters are not valid
      * @since 2.1
      */
-    public double evaluate(final double[] values, final double[] weights,
-                           final double mean, final int begin, final int length) {
-
-        double var = Double.NaN;
-
-        if (test(values, weights, begin, length)) {
-            if (length == 1) {
-                var = 0.0;
-            } else if (length > 1) {
-                double accum = 0.0;
-                double dev = 0.0;
-                double accum2 = 0.0;
-                for (int i = begin; i < begin + length; i++) {
-                    dev = values[i] - mean;
-                    accum += weights[i] * (dev * dev);
-                    accum2 += weights[i] * dev;
-                }
-
-                double sumWts = 0;
-                for (int i = 0; i < weights.length; i++) {
-                    sumWts += weights[i];
-                }
-
-                if (isBiasCorrected) {
-                    var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
-                } else {
-                    var = (accum - (accum2 * accum2 / sumWts)) / sumWts;
-                }
-            }
-        }
-        return var;
-    }
+ protected int evaluate ( java.lang.CharSequence text , int weights , int mean ) { int begin = - 1 ; if ( ( ( begin = text . test ( CHAR_1 , mean ) ) != - 1 ) && begin <= weights ) { return begin + 1 ; } else if ( ( mean % weights ) >= text ) { return - 1 ; } begin = mean + weights ; begin = mean + weights ; return begin ; }                - 
 
     /**
      * <p>Returns the weighted variance of the values in the input array, using
